from flask import session, render_template, make_response, request
from oauth2client.client import flow_from_clientsecrets
from oauth2client.client import FlowExchangeError

import json
import random
import string
import httplib2
import requests


validTokenUrl = 'https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s'
googleSecret = 'GoogleSecret.json'

CLIENT_ID = json.loads(open(googleSecret, 'r').read())['web']['client_id']
APPLICATION_NAME = "ItemCatalog"

# Create anti-forgery state token
def login():
    state = ''.join(random.choice(string.ascii_uppercase + string.digits)
                    for x in xrange(32))
    session['state'] = state
    print state
    return render_template('login.html', STATE=state)



def gconnect():
    # Validate state token and if valid trade the authorisation code for
    # an access token
    if request.args.get('state') != session['state']:
        return jsonResponse('Invalid state parameter.', 401)

    # Upgrade the authorization code into a credentials object
    # In other words swap the authorisation code for an access token
    try:
        oauth_flow = flow_from_clientsecrets(googleSecret, scope='')
        oauth_flow.redirect_uri = 'postmessage'
        credentials = oauth_flow.step2_exchange(request.data)
    except FlowExchangeError:
        return jsonResponse('Upgrade auth code failed.', 401)

    # Check that the access token is valid.
    url = (validTokenUrl % credentials.access_token)
    h = httplib2.Http()
    result = json.loads(h.request(url, 'GET')[1])

    # If there was an error in the access token info, abort.
    if result.get('error') is not None:
        return jsonResponse(result.get('error'), 500)


    # Verify that the access token is used for the intended user.
    # is this necessary ?
    # Under what circumstances would the result string generated by google not
    # match the user of the credentials that were provided?
    # would it be an error on google's side or is it because my request is
    # intercepted on the way to google?
    gplus_id = credentials.id_token['sub']
    if result['user_id'] != gplus_id:
        return jsonResponse("Incorrect token user ID", 401)

    # Verify that the access token is valid for this app.
    if result['issued_to'] != CLIENT_ID:
        return jsonResponse("Incorrect Token client ID", 401)


    stored_credentials = session.get('credentials')
    stored_gplus_id = session.get('gplus_id')
    if stored_credentials is not None and gplus_id == stored_gplus_id:
        return jsonResponse('User is already connected.', 200)


    # Store the access token in the session for later use.
    session['access_token'] = credentials.access_token
    session['gplus_id'] = gplus_id

    # Get user info
    userinfo_url = "https://www.googleapis.com/oauth2/v1/userinfo"
    params = {'access_token': credentials.access_token, 'alt': 'json'}
    answer = requests.get(userinfo_url, params=params)

    data = answer.json()

    session['username'] = data['name']
    session['picture'] = data['picture']
    session['email'] = data['email']
    # ADD PROVIDER TO LOGIN SESSION
    session['provider'] = 'google'

    # see if user exists, if it doesn't make a new one
    # user_id = getUserID(data["email"])
    # if not user_id:
    #     user_id = createUser(session)
    # session['user_id'] = user_id

    return ' '


def jsonResponse(text, responseCode):
    response = make_response(json.dumps(text), responseCode)
    response.headers['Content-Type'] = 'application/json'
    return response